"use client";

import { useState, useEffect } from "react";
import { useTheme } from "next-themes";
import { Button } from "@southern-syntax/ui";

interface ThemeToggleProps {
  initialTheme: string | null;
}

export default function ThemeToggle({ initialTheme }: ThemeToggleProps) {
  const [mounted, setMounted] = useState(false); // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ mount
  const { resolvedTheme, setTheme } = useTheme();

  // useEffect ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏ô client ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ mounted ‡πÄ‡∏õ‡πá‡∏ô true
  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (mounted && resolvedTheme) {
      document.cookie = `theme=${resolvedTheme}; path=/`;
    }
  }, [mounted, resolvedTheme]);

  // ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏°‡∏à‡∏≤‡∏Å props ‡∏Å‡πà‡∏≠‡∏ô mount ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏∞‡∏û‡∏£‡∏¥‡∏ö
  const icon =
    (mounted ? resolvedTheme : initialTheme) === "dark" ? "‚òÄÔ∏è" : "üåô";

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ mount ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  return (
    <Button
      variant="ghost"
      onClick={() => setTheme(resolvedTheme === "dark" ? "light" : "dark")}
    >
      {/* {resolvedTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô'} */}
      {icon}
    </Button>
  );
}
